第一个文件：实现KNN类

Knn: import numpy as np 

from collections import Counter

def euclidean_distance(x1,y1):
    return np.sum((x1-y1)**2)

class KNN:

    def __init__(self,k=3):
        self.k = k 

    def fit(self,X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train

    def predict(self,X_test):
        predicted_labels = [self._predict(x)[0]for x in X_test]
        
        return np.array(predicted_labels)

    def _predict(self,x):
        # compute the distances
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]
        # get k nearest samples, lables
        k_indices = np.argsort(distances)[:self.k]
        k_nearest_labels = [self.y_train[i] for i in k_indices]
        # major vote, most common class labels 
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

第二个文件：导入MNIST数据集并且用KNN进行训练
mnist: import os 
import struct 
import numpy as np 

def load(path,kind = '%s'):

    labels_path = os.path.join(path,'%s-labels-idx1-ubyte'% kind)
    images_path = os.path.join(path,'%s-images-idx3-ubyte'% kind)

    with open(labels_path,'rb') as lbpath:
        magic,n = struct.unpack('>II',lbpath.read(8))

        labels = np.fromfile(lbpath,dtype = np.uint8)

    with open(images_path,'rb') as imgpath:
        magic,num,rows,cols = struct.unpack('>IIII',imgpath.read(16))

        images = np.fromfile(imgpath,dtype = np.uint8).reshape(len(labels),784)

    return images,labels 
def binary(X_train):
    row = X_train.shape[0]
    col = X_train.shape[1]

    for i in range(row):
        for j in range(col):
            if(X_train[i][j]>127):
                X_train[i][j] = 1
            else: X_train[i][j] = 0
    return X_train

X_train,y_train = load("/Users/yanchenhao/Desktop/MNIST1","train")
X_test ,y_test  = load("/Users/yanchenhao/Desktop/MNIST1","t10k")
X_train1 =  binary(X_train)
X_test1  =  binary(X_test)

from knn import KNN 
clf = KNN(k=5)
clf.fit(X_train1,y_train)
predictions,a = clf.predict(X_test1) 
acc = np.sum(predictions == y_test) / len(y_test)
print(acc)
