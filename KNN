第一个文件：实现KNN类

Knn: import numpy as np 

from collections import Counter

def euclidean_distance(x1,y1):
    return np.sum((x1-y1)**2)

class KNN:

    def __init__(self,k=3):
        self.k = k 

    def fit(self,X1_train, Y1_train):
        self.X1_train = X1_train
        self.Y1_train = Y1_train

    def predict(self,X1_test):
        predicted_labels = [self._predict(x)[0]for x in X1_test]
        
        return np.array(predicted_labels)

    def _predict(self,X):
        # compute the distances
        distances = [euclidean_distance(X, X_train) for X_train in self.X1_train]
        # get k nearest samples, lables
        k_indices = np.argsort(distances)[:self.k]
        k_nearest_labels = [self.Y1_train[i] for i in k_indices]
        # major vote, most common class labels 
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

第二个文件：导入MNIST数据集并且用KNN进行训练
mnist: import os 
import struct 
import numpy as np 

def load(path,kind = '%s'):

    labels_path = os.path.join(path,'%s-labels-idx1-ubyte'% kind)
    images_path = os.path.join(path,'%s-images-idx3-ubyte'% kind)

    with open(labels_path,'rb') as lbpath:
        magic,n = struct.unpack('>II',lbpath.read(8))

        labels = np.fromfile(lbpath,dtype = np.uint8)

    with open(images_path,'rb') as imgpath:
        magic,num,rows,cols = struct.unpack('>IIII',imgpath.read(16))

        images = np.fromfile(imgpath,dtype = np.uint8).reshape(len(labels),784)

    return images,labels 
def binary(X1_train):
    row = X1_train.shape[0]
    col = X1_train.shape[1]

    for i in range(row):
        for j in range(col):
            if(X1_train[i][j]>127):
                X1_train[i][j] = 1
            else: X1_train[i][j] = 0
    return X1_train

X1_train,Y1_train = load("/Users/liujing/Desktop/MNIST1","train")
X1_test ,Y1_test  = load("/Users/liujing/Desktop/MNIST1","t10k")
X1_train1 =  binary(X1_train)
X1_test1  =  binary(X1_test)

from knn import KNN 
clf = KNN(k=5)
clf.fit(X1_train1,Y1_train)
predictions,a = clf.predict(X1_test1) 
acc = np.sum(predictions == Y1_test) / len(Y1_test)
print(acc)
